/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query GetExamplePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetExamplePageDocument,
    "\n  fragment CoreParagraphFragment on CoreParagraph {\n    attributes {\n      ... on CoreParagraphAttributes {\n        content\n        align\n        dropCap\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n": types.CoreParagraphFragmentFragmentDoc,
    "\n  fragment CoreHeadingBlockFragment on CoreHeading {\n    attributes {\n      ... on CoreHeadingAttributes {\n        content\n        level\n        align\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n": types.CoreHeadingBlockFragmentFragmentDoc,
    "\n  fragment CoreImageBlockFragment on CoreImage {\n    attributes {\n      ... on CoreImageAttributes {\n        url\n        alt\n        caption\n        align\n        href\n        rel\n        linkClass\n        linkTarget\n        sizeSlug\n        title\n        width\n        height\n        id\n      }\n    }\n  }\n": types.CoreImageBlockFragmentFragmentDoc,
    "\n  fragment CoreButtonBlockFragment on CoreButton {\n    attributes {\n      ... on CoreButtonAttributes {\n        url\n        text\n        linkTarget\n        rel\n        className\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n": types.CoreButtonBlockFragmentFragmentDoc,
    "\n  fragment CoreButtonsBlockFragment on CoreButtons {\n    attributes {\n      ... on CoreButtonsAttributes {\n        align\n        layout\n        style\n      }\n    }\n  }\n": types.CoreButtonsBlockFragmentFragmentDoc,
    "\n  fragment CoreColumnsBlockFragment on CoreColumns {\n    attributes {\n      ... on CoreColumnsAttributes {\n        isStackedOnMobile\n        align\n        style\n      }\n    }\n  }\n": types.CoreColumnsBlockFragmentFragmentDoc,
    "\n  fragment CoreColumnBlockFragments on CoreColumn {\n    attributes {\n      ... on CoreColumnAttributes {\n        width\n        verticalAlignment\n        style\n      }\n    }\n  }\n": types.CoreColumnBlockFragmentsFragmentDoc,
    "\n  fragment CoreGroupBlockFragment on CoreGroup {\n    attributes {\n      ... on CoreGroupAttributes {\n        align\n        style\n        backgroundColor\n        textColor\n      }\n    }\n  }\n": types.CoreGroupBlockFragmentFragmentDoc,
    "\n  fragment CoreCoverBlockFragment on CoreCover {\n    attributes {\n      ... on CoreCoverAttributes {\n        url\n        id\n        hasParallax\n        dimRatio\n        overlayColor\n        backgroundType\n        minHeight\n        minHeightUnit\n        gradient\n        contentPosition\n        align\n        style\n      }\n    }\n  }\n": types.CoreCoverBlockFragmentFragmentDoc,
    "\n  fragment GravityformsFormFragment on GravityformsForm {\n    attributes {\n      ... on GravityformsFormAttributes {\n        formId\n        title\n        description\n        ajax\n        tabindex\n        fieldValues\n      }\n    }\n  }\n": types.GravityformsFormFragmentFragmentDoc,
    "\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetArchiveDocument,
    "\n  \n  \n  \n  \n  \n  \n  \n  \n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    page(id: \"home\", idType: URI) {\n      title\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n      }\n\n      featuredImage {\n        node {\n          sourceUrl\n          altText\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n    footerMenuItems: menuItems(where: { location: FOOTER }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetHomePageDocument,
    "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n        \n        innerBlocks {\n          name\n          __typename\n          renderedHtml\n          id: clientId\n          parentId: parentClientId\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        label\n        path\n        parentId\n      }\n    }\n  }\n": types.GetPageDocument,
    "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n": types.GetPostDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetExamplePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetExamplePage {\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreParagraphFragment on CoreParagraph {\n    attributes {\n      ... on CoreParagraphAttributes {\n        content\n        align\n        dropCap\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreParagraphFragment on CoreParagraph {\n    attributes {\n      ... on CoreParagraphAttributes {\n        content\n        align\n        dropCap\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreHeadingBlockFragment on CoreHeading {\n    attributes {\n      ... on CoreHeadingAttributes {\n        content\n        level\n        align\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreHeadingBlockFragment on CoreHeading {\n    attributes {\n      ... on CoreHeadingAttributes {\n        content\n        level\n        align\n        fontSize\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreImageBlockFragment on CoreImage {\n    attributes {\n      ... on CoreImageAttributes {\n        url\n        alt\n        caption\n        align\n        href\n        rel\n        linkClass\n        linkTarget\n        sizeSlug\n        title\n        width\n        height\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreImageBlockFragment on CoreImage {\n    attributes {\n      ... on CoreImageAttributes {\n        url\n        alt\n        caption\n        align\n        href\n        rel\n        linkClass\n        linkTarget\n        sizeSlug\n        title\n        width\n        height\n        id\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreButtonBlockFragment on CoreButton {\n    attributes {\n      ... on CoreButtonAttributes {\n        url\n        text\n        linkTarget\n        rel\n        className\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreButtonBlockFragment on CoreButton {\n    attributes {\n      ... on CoreButtonAttributes {\n        url\n        text\n        linkTarget\n        rel\n        className\n        backgroundColor\n        textColor\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreButtonsBlockFragment on CoreButtons {\n    attributes {\n      ... on CoreButtonsAttributes {\n        align\n        layout\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreButtonsBlockFragment on CoreButtons {\n    attributes {\n      ... on CoreButtonsAttributes {\n        align\n        layout\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreColumnsBlockFragment on CoreColumns {\n    attributes {\n      ... on CoreColumnsAttributes {\n        isStackedOnMobile\n        align\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreColumnsBlockFragment on CoreColumns {\n    attributes {\n      ... on CoreColumnsAttributes {\n        isStackedOnMobile\n        align\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreColumnBlockFragments on CoreColumn {\n    attributes {\n      ... on CoreColumnAttributes {\n        width\n        verticalAlignment\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreColumnBlockFragments on CoreColumn {\n    attributes {\n      ... on CoreColumnAttributes {\n        width\n        verticalAlignment\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreGroupBlockFragment on CoreGroup {\n    attributes {\n      ... on CoreGroupAttributes {\n        align\n        style\n        backgroundColor\n        textColor\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreGroupBlockFragment on CoreGroup {\n    attributes {\n      ... on CoreGroupAttributes {\n        align\n        style\n        backgroundColor\n        textColor\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment CoreCoverBlockFragment on CoreCover {\n    attributes {\n      ... on CoreCoverAttributes {\n        url\n        id\n        hasParallax\n        dimRatio\n        overlayColor\n        backgroundType\n        minHeight\n        minHeightUnit\n        gradient\n        contentPosition\n        align\n        style\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment CoreCoverBlockFragment on CoreCover {\n    attributes {\n      ... on CoreCoverAttributes {\n        url\n        id\n        hasParallax\n        dimRatio\n        overlayColor\n        backgroundType\n        minHeight\n        minHeightUnit\n        gradient\n        contentPosition\n        align\n        style\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment GravityformsFormFragment on GravityformsForm {\n    attributes {\n      ... on GravityformsFormAttributes {\n        formId\n        title\n        description\n        ajax\n        tabindex\n        fieldValues\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GravityformsFormFragment on GravityformsForm {\n    attributes {\n      ... on GravityformsFormAttributes {\n        formId\n        title\n        description\n        ajax\n        tabindex\n        fieldValues\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetArchive($uri: String!) {\n    nodeByUri(uri: $uri) {\n      archiveType: __typename\n      ... on Category {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n      ... on Tag {\n        name\n        posts {\n          nodes {\n            id\n            title\n            uri\n          }\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  \n  \n  \n  \n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    page(id: \"home\", idType: URI) {\n      title\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n      }\n\n      featuredImage {\n        node {\n          sourceUrl\n          altText\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n    footerMenuItems: menuItems(where: { location: FOOTER }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  \n  \n  \n  \n  query GetHomePage {\n    generalSettings {\n      title\n      description\n    }\n    page(id: \"home\", idType: URI) {\n      title\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n      }\n\n      featuredImage {\n        node {\n          sourceUrl\n          altText\n        }\n      }\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n    footerMenuItems: menuItems(where: { location: FOOTER }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n        \n        innerBlocks {\n          name\n          __typename\n          renderedHtml\n          id: clientId\n          parentId: parentClientId\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        label\n        path\n        parentId\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n  query GetPage($databaseId: ID!, $asPreview: Boolean = false) {\n    page(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      editorBlocks(flat: true) {\n        name\n        __typename\n        renderedHtml\n        id: clientId\n        parentId: parentClientId\n        ...CoreParagraphFragment\n        ...CoreHeadingBlockFragment\n        ...CoreGroupBlockFragment\n        ...CoreColumnsBlockFragment\n        ...CoreColumnBlockFragments\n        ...CoreImageBlockFragment\n        ...CoreButtonsBlockFragment\n        ...CoreButtonBlockFragment\n        \n        innerBlocks {\n          name\n          __typename\n          renderedHtml\n          id: clientId\n          parentId: parentClientId\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        label\n        path\n        parentId\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPost($databaseId: ID!, $asPreview: Boolean = false) {\n    post(id: $databaseId, idType: DATABASE_ID, asPreview: $asPreview) {\n      title\n      content\n      date\n      author {\n        node {\n          name\n        }\n      }\n    }\n    generalSettings {\n      title\n      description\n    }\n    primaryMenuItems: menuItems(where: { location: PRIMARY }) {\n      nodes {\n        id\n        uri\n        path\n        label\n        parentId\n        cssClasses\n        menu {\n          node {\n            name\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;